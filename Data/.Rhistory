require("knitr")
opts_knit$set(root.dir = "~/Documents/Research/Workshops/IRRI_2025/Module3")
# Load the Required Libraries
rm(list=ls()) # Remove previous work
library(easypackages)
libraries("dplyr", "reshape2", "readxl", "lme4", "arm")
# Read the saved csv file, if working directly
demo.data.filtered<-read.csv(file="demo.data.filtered2.csv",
header = TRUE)
setwd("~/Documents/Research/Workshops/IRRI_2025/Module3")
# Read the saved csv file, if working directly
demo.data.filtered<-read.csv(file=".data/demo.data.filtered2.csv",
header = TRUE)
setwd("~/Documents/Research/Workshops/IRRI_2025/Module3/Data")
# Read the saved csv file, if working directly
demo.data.filtered<-read.csv(file="demo.data.filtered2.csv",
header = TRUE)
demo.data.filtered<-read.csv(file="demo.data.filtered2.csv",
header = TRUE)
# Read the saved csv file, if working directly
demo.data.filtered<-read.csv(file="demo.data.filtered2.csv",
header = TRUE)
str(demo.data.filtered)
# factor conversion if below are not in factors
columns<-c("Environment", "Genotype", "Rep", "Block",
"Row", "Column", "Line.type")
demo.data.filtered[, columns]<-lapply(columns, function(x) as.factor(demo.data.filtered[[x]]))
demo.data.filtered$Yield<-as.numeric(demo.data.filtered$Yield)
demo.data.filtered$HT<-as.numeric(demo.data.filtered$HT)
demo.data.filtered$DTF<-as.numeric(demo.data.filtered$DTF)
# Subset the required columns
demo.data.filtered<-demo.data.filtered[, c("Environment", "Genotype",
"Rep", "Block", "Row","Column",
"Line.type","Yield", "HT", "DTF")]
# First we will arrange the rows and columns for spatial analysis.
# Now we will subset the environments and Yields for analysis
demo.data.filtered<-data.frame(demo.data.filtered%>% group_by(Environment)%>%arrange(Row, Column)) # arrange by row and column
demo.data.filtered<-data.frame(demo.data.filtered%>% arrange(Environment)) # Arrange by environment
# Subset the environment 1
sub.data<-subset(demo.data.filtered, Environment=="Env1")
sub.data<-droplevels.data.frame(sub.data)
# Now apply model
model1<-lmer(Yield~Rep+(1|Genotype)+ (1|Rep:Block), data =sub.data)
# Summarise the results
summary(model1)
Ve<- VarCorr(model1)
Ve
# ANOVA
anova(model1)
BLUEs<-fixef(model1)
BLUEs
# Extract the Random effects
BLUPs<-data.frame(Blups.yield=ranef(model1)$Genotype)
GV<-data.frame(BLUps.GY=coef(model1)$Genotype[,1]) #Genotype values (Blups +Intercept)
# Extract the variance components
Ve<- data.frame (VarCorr(model1))
Ve
# Now calculate heritability using variance components
genotype.var=Ve[1,4]
error.var=Ve[2,4]
# Now heritability
h2=genotype.var/(genotype.var+error.var)*100
h2
# Reliability
std.err<-se.ranef(model1)$Genotype
v_BLUP<- mean(std.err)
# Heritability/Reliability
h2<- (1-((v_BLUP)^2/(Ve[1,4]*2)))*100
h2
# Linear model to get ANOVA
demo.data.filtered$Environment<-as.factor(demo.data.filtered$Environment)
model.anova<-lm(formula = Yield~Genotype+Environment+Genotype*Environment+Environment:Rep+ Environment:Rep:Block,
data=demo.data.filtered)
# Get ANOVA
anova(model.anova)
demo.data.filtered$Environment<-as.factor(demo.data.filtered$Environment)
Model3.lme4<-lmer(Yield~Rep+(1|Genotype)+(1|Environment:Genotype)+
(1|Environment:Block), data=demo.data.filtered)
summary(Model3.lme4)
plot(Model3.lme4)
std.err<-se.ranef(Model3.lme4)$Genotype
v_BLUP<- mean(std.err)
# Heritability/Reliability
h2<- (1-((v_BLUP)^2/(Ve[2,4]*2)))*100
h2
demo.data.filtered$Environment<-as.factor(demo.data.filtered$Environment)
Model3.lme4<-lmer(Yield~Rep+(1|Genotype)+(1|Environment)+
(1|Block), data=demo.data.filtered)
summary(Model3.lme4)
plot(Model3.lme4)
std.err<-se.ranef(Model3.lme4)$Genotype
v_BLUP<- mean(std.err)
# Heritability/Reliability
h2<- (1-((v_BLUP)^2/(Ve[2,4]*2)))*100
h2
Ve<- data.frame (VarCorr(Model3.lme4))
Ve
std.err<-se.ranef(Model3.lme4)$Genotype
v_BLUP<- mean(std.err)
# Heritability/Reliability
h2<- (1-((v_BLUP)^2/(Ve[1,4]*2)))*100
h2
setwd("~/Documents/Research/Workshops/IRRI_2025/Module3/Data")
